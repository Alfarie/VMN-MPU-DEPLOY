"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sensors_logger_1 = __importDefault(require("../logger/sensors-logger"));
const vmn_logger_1 = __importDefault(require("../logger/vmn-logger"));
const moment_1 = __importDefault(require("moment"));
exports.InitSGLogger = () => {
    const loggingTime = 50000;
    var json = {
        datetime: moment_1.default('2018-01-01 00:00:00').format('YYYY-MM-DD HH:mm:ss'),
        soil: 0,
        temperature: 0,
        humidity: 0,
        vpd: 0,
        par: 0,
        co2: 0,
        paracc: 0
    };
    setTimeout(() => {
        for (var i = 0; i < loggingTime; i++) {
            json.datetime = moment_1.default(json.datetime).add(1, 'minute').format('YYYY-MM-DD HH:mm:ss');
            json.soil = Math.random();
            json.temperature = Math.random();
            json.humidity = Math.random();
            json.vpd = Math.random();
            json.par = Math.random();
            json.co2 = Math.random();
            json.paracc = Math.random();
            sensors_logger_1.default.log(json);
        }
    }, 2000);
};
var getNodes = () => {
    return {
        supply: Math.random() * 2.0,
        nodes: [
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 }
        ],
        datetime: moment_1.default().format('YYYY-MM-DD HH:mm:ss')
    };
};
exports.InitVmnLogger = () => {
    const loggingTime = 100000;
    var json = {
        supply: 2.0,
        nodes: [
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 },
            { ec: Math.random() * 1, volume: 300 }
        ],
        datetime: moment_1.default('2018-01-01 00:00:00').format('YYYY-MM-DD HH:mm:ss')
    };
    setTimeout(() => {
        for (var i = 0; i < loggingTime; i++) {
            const datetime = moment_1.default(json.datetime).add(1, 'minute').format('YYYY-MM-DD HH:mm:ss');
            json = Object.assign({}, getNodes(), { datetime });
            // console.log(json)
            vmn_logger_1.default.log({
                datetime: datetime,
                data: json
            });
            // console.log('log')
        }
        console.log('finish');
    }, 2000);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtc2Vuc29ycy1sb2dnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdHlwZXMvc2ltdWxhdGlvbi9nZW5lcmF0ZS1zZW5zb3JzLWxvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhFQUFnRDtBQUNoRCxzRUFBNkM7QUFDN0Msb0RBQTJCO0FBSWhCLFFBQUEsWUFBWSxHQUFHLEdBQUcsRUFBRTtJQUUzQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDMUIsSUFBSSxJQUFJLEdBQVE7UUFDWixRQUFRLEVBQUUsZ0JBQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQztRQUNyRSxJQUFJLEVBQUUsQ0FBQztRQUNQLFdBQVcsRUFBRSxDQUFDO1FBQ2QsUUFBUSxFQUFFLENBQUM7UUFDWCxHQUFHLEVBQUUsQ0FBQztRQUNOLEdBQUcsRUFBRSxDQUFDO1FBQ04sR0FBRyxFQUFFLENBQUM7UUFDTixNQUFNLEVBQUUsQ0FBQztLQUNaLENBQUE7SUFDRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDckYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLEdBQUcsR0FB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